Index: nox-system/cache/noxSystemCache.class.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\n\n/**\n * Класс системного кеша\n *\n * Отличается от обычного тем, что работает всегда\n *\n * @author     Сырчиков Виталий Евгеньевич <maddoger@gmail.com>\n * @version    1.2\n * @package    nox-system\n * @subpackage cache\n */\nclass noxSystemCache\n{\n\n    /**\n     * Возвращает хеш имени\n     *\n     * @param string\n     * @return string\n     */\n    public static function getHash($name)\n    {\n        return md5($name);\n    }\n\n    /**\n     * Кэширует информацию $content под идентификатором $name\n     *\n     * @param string $name   уникальный идентификатор кешируемой информации\n     * @param mixed $content информация, которую необходимо сохранить\n     * @return bool\n     */\n    public static function create($name, $content)\n    {\n        //Проверяем правильность параметров\n        if (!$name || !$content)\n        {\n            return false;\n        }\n\n        $folder = noxRealPath('nox-cache');\n        //_d($folder);\n\n        //Если в файл нельзя записать\n        if (!is_writable($folder))\n        {\n            chmod($folder, 0777);\n        }\n\n        return (file_put_contents($folder . '/' . self::getHash($name), serialize($content), LOCK_EX) > 0);\n    }\n\n    /**\n     * Возвращает информацию, сохраненную под идентификатором\n     *\n     * @param string $name      уникальный идентификатор кешируемой информации\n     * @param int $expTime      временной промежуток в секундах, после которого информация считается устаревшей, т.е. несуществуемой\n     * @param bool $expTimeFull если true, то $expTime берется как\n     * @return mixed информация, либо false в случае отсутствия кэша\n     */\n    public static function get($name, $expTime = 0, $expTimeFull = false)\n    {\n        //Проверяем правильность параметров\n        if (!$name)\n        {\n            return false;\n        }\n\n        //Получаем хеш имени\n        $name = self::getHash($name);\n\n        $filename = noxRealPath('nox-cache/' . $name);\n        //Если файл не существует\n        if (!file_exists($filename))\n        {\n            return false;\n        }\n\n        if ($expTime === 0)\n        {\n            return @unserialize(file_get_contents($filename));\n        } else\n        {\n\n            //Получаем время последнего изменения файла\n            $time = filemtime($filename);\n            if (!$expTimeFull)\n            {\n                $expTime = time() - $expTime;\n            }\n\n            //Если информация не устарела\n            if ($expTime <= $time)\n            {\n                //Читаем файл и возвращаем сохраненную информацию\n                return @unserialize(file_get_contents($filename));\n            } else\n            {\n                //Иначе, удаляем файл\n                @unlink($filename);\n                return false;\n            }\n        }\n    }\n\n    /**\n     * Очищает информацию, сохраненную под идентификатором\n     *\n     * @param string $name уникальный идентификатор кешируемой информации\n     * @return bool\n     */\n    public static function clear($name)\n    {\n        //Проверяем правильность параметров\n        if (!$name)\n        {\n            return false;\n        }\n\n        //Получаем хеш имени\n        $name = self::getHash($name);\n\n        $filename = noxRealPath('nox-cache/' . $name);\n        //Если файл не существует\n        if (!file_exists($filename))\n        {\n            return false;\n        }\n        @unlink($filename);\n        return true;\n    }\n}\n\n?>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/nox-system/cache/noxSystemCache.class.php b/nox-system/cache/noxSystemCache.class.php
--- a/nox-system/cache/noxSystemCache.class.php	
+++ b/nox-system/cache/noxSystemCache.class.php	
@@ -33,6 +33,7 @@
      */
     public static function create($name, $content)
     {
+        return true; //cillmaster for test
         //Проверяем правильность параметров
         if (!$name || !$content)
         {
Index: nox-config/db.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\nreturn array(\r\n    'default' =>\r\n    array(\r\n        'type'     => 'MySqli',\r\n        'db'       => '12345',\r\n        'login'    => '12345',\r\n        'password' => '12345',\r\n        'host'     => 'localhost'\r\n    )\r\n)\r\n?>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/nox-config/db.php b/nox-config/db.php
--- a/nox-config/db.php	
+++ b/nox-config/db.php	
@@ -3,9 +3,9 @@
     'default' =>
     array(
         'type'     => 'MySqli',
-        'db'       => '12345',
-        'login'    => '12345',
-        'password' => '12345',
+        'db'       => 'admin_moga',
+        'login'    => 'admin_moga',
+        'password' => 'msq0WuAGuy',
         'host'     => 'localhost'
     )
 )
Index: nox-system/autoload/noxAutoLoader.class.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\n/**\n * noxAutoLoader\n *\n * Класс для загрузки классов из файлов\n *\n * @author     Сырчиков Виталий Евгеньевич <maddoger@gmail.com>\n * @version    1.2\n * @package    nox-system\n * @subpackage core\n */\n\nclass PsrAutoloader {\n\n    /**\n     * @var array of arrays of strings\n     */\n    private $hosts = [];\n    private $ext = '.php';\n\n    public function __construct()\n    {\n        if (spl_autoload_register(array($this, 'autoload')) === false) {\n            throw new noxException(sprintf('Невозможно зарегистрировать %s::autoload как метод автозагрузки!', get_class($this)));\n        }\n    }\n\n    public function addHost($start, $path)\n    {\n        $this->hosts[] = [$start, $path];\n    }\n\n    public function autoload($clazz) {\n        foreach($this->hosts as $host) {\n            if($host[0] === substr($clazz, 0, strlen($host[0]))) {\n                $clazz = str_replace($host[0], $host[1], $clazz);\n                break;\n            }\n        }\n\n        $clazz .= $this->ext;\n        $clazz = noxRealPath($clazz);\n\n        return file_exists($clazz) && require_once $clazz;\n    }\n}\n\nclass noxAutoLoader\n{\n    private $cacheChange = false;\n\n    public function __construct()\n    {\n        //Регистрируем функцию автозагрузки\n        ini_set('unserialize_callback_func', 'spl_autoload_call');\n        if (spl_autoload_register(array($this, 'autoload')) === false) {\n            throw new noxException(sprintf('Невозможно зарегистрировать %s::autoload как метод автозагрузки!', get_class($this)));\n        }\n\n        $psrAutoloader = new PsrAutoloader();\n        $psrAutoloader->addHost('nox', 'nox-system');\n\n        //Пробуем получить данные из кеша\n        if ($cache = noxSystemCache::get('nox-autoloader')) {\n            $this->classes = array_merge($cache, $this->classes);\n        }\n    }\n\n    /**\n     * Деструктор. Сохраняем кеш\n     */\n    public function __destruct()\n    {\n        if ($this->cacheChange) {\n            noxSystemCache::create('nox-autoloader', $this->classes);\n        }\n    }\n\n    /**\n     * Добавляет путь к классу в известные пути\n     *\n     * @param $class Либо имя класса, либо массив 'класс'=>'путь'.\n     * @param $path  Путь к файлу, либо ничего.\n     * @return $this\n     */\n    public function add($class, $path = '')\n    {\n        if (is_array($class)) {\n            foreach ($class as $class_name => $path) {\n                $this->classes[strtolower($class_name)] = $path;\n            }\n        } else {\n            $this->classes[strtolower($class)] = $path;\n        }\n        $this->cacheChange = true;\n        return $this;\n    }\n\n    /**\n     * Находит путь к файлу, содержащему класс\n     *\n     * @param string $class Имя класса\n     * @return string\n     */\n    public function get3rdparty($class) {\n        //_d($class);\n        $lowClass = strtolower($class);\n        //Maybe PayPal?\n        static $libFolder = '/nox-modules/3rdparty/';\n        $className = noxRealPath($libFolder . $class . '.php');\n\n        if(file_exists($className)) {\n            $this->classes[ $lowClass ] = $className;\n            $this->cacheChange = true;\n            return $className;\n        }\n        else {\n            return false;\n        }\n    }\n\n    public function get($class)\n    {\n        //Преобразуем имя класса в нижний регистр\n        $lowclass = strtolower($class);\n\n\t    if (isset($this->classes[$lowclass])) {\n\t\t    if (file_exists($this->classes[$lowclass])) {\n\t\t\t    return $this->classes[$lowclass];\n\t\t    } else\n\t\t    {\n\t\t\t    unset($this->classes[$lowclass]);\n\t\t\t    $this->cacheChange = true;\n\t\t    }\n\t    }\n\n        if (!isset(noxSystem::$params['frontend']))\n        {\n            return false;\n        }\n\n        $path = '';\n\n        //Это модель?\n        if (substr($class, -5, 5) == 'Model')\n        {\n            if (preg_match('/^([a-z0-9]*)(.*?)Model$/s', $class, $matches)) {\n                $path = 'nox-modules/' . $matches[1] . '/lib/models/' . $matches[1] . $matches[2] . '.model.php';\n            } else\n            {\n                return $this->get3rdparty($class);\n            }\n\n        }\n        else\n        {\n\t        $lowclass = ( noxSystem::$params['frontend'] ? 'frontend/' :\n\t\t\t        (noxSystem::$params['backend'] ? 'backend/' : '') ).$lowclass;\n\n\t        if (isset($this->classes[$lowclass])) {\n\t\t        if (file_exists($this->classes[$lowclass])) {\n\t\t\t        return $this->classes[$lowclass];\n\t\t        } else\n\t\t        {\n\t\t\t        unset($this->classes[$lowclass]);\n\t\t\t        $this->cacheChange = true;\n\t\t        }\n\t        }\n\n            $filename = '';\n            $module = '';\n\n            if (substr($class, -7, 7) == 'Actions')\n            {\n\n                if (preg_match('/^([a-z0-9]*)Actions$/s', $class, $matches)) {\n                    $filename = $matches[1] . '.actions.php';\n                    $module = $matches[1];\n                }\n                //Если это действие\n                elseif (preg_match('/^([a-z0-9]*)([A-Z][^A-Z]*)(.*?)Actions$/s', $class, $matches)) {\n                    $filename = $matches[1] . $matches[2] . $matches[3] . '.actions.php';\n                    $module = $matches[1];\n                }\n\n            } elseif (substr($class, -6, 6) == 'Action')\n            {\n\n                if (preg_match('/^([a-z0-9]*)([A-Z][^A-Z]*)(.*?)Action$/s', $class, $matches)) {\n                    $filename = $matches[1] . $matches[2] . $matches[3] . '.action.php';\n                    $module = $matches[1];\n                }\n            }\n\n            if (!$filename)\n            {\n                return $this->get3rdparty($class);\n            }\n\n            $path = 'nox-modules/' . $module . '/lib/actions/' .\n                (noxSystem::$params['frontend'] ? 'frontend/' :\n                    (noxSystem::$params['backend'] ? 'backend/' : '') )\n                . $filename;\n            if (!file_exists($path))\n            {\n                $path = 'nox-modules/' . $module . '/lib/actions/' . $filename;\n            }\n        }\n\n        if (file_exists($path)) {\n            $this->classes[ $lowclass ] = $path;\n            $this->cacheChange = true;\n            return $path;\n        }\n         else\n        {\n            return $this->get3rdparty($class);\n        }\n    }\n\n    public function autoload($class)\n    {\n        //Получаем путь и загружаем файл\n        if ($path = $this->get($class)) {\n            require_once($path);\n        }\n        return true;\n    }\n\n\n    /**\n     * Массив классов с известными путями к системным файлам\n     *\n     * @var array\n     */\n    protected $classes = array(\n        //Ядро\n        'noxconfig'                => 'nox-system/config/noxConfig.class.php',\n        'noxlocale'                => 'nox-system/locale/noxLocale.class.php',\n        'noxdate'                  => 'nox-system/date/noxDate.class.php',\n        'noxcache'                 => 'nox-system/cache/noxCache.class.php',\n        //Базы данных\n        'noxdbadapter'             => 'nox-system/db/noxDbAdapter.class.php',\n        'noxdbmysqladapter'        => 'nox-system/db/noxDbMySQLAdapter.class.php',\n        'noxdbmysqliadapter'       => 'nox-system/db/noxDbMySQLiAdapter.class.php',\n        'noxdbmsaccessadapter'     => 'nox-system/db/noxDbMsAccessAdapter.class.php',\n        'noxdbconnector'           => 'nox-system/db/noxDbConnector.class.php',\n        'noxdbquery'               => 'nox-system/db/noxDbQuery.class.php',\n        'noxmodel'                 => 'nox-system/db/noxModel.class.php',\n        //Модули\n        'noxapplication'           => 'nox-system/application/noxApplication.class.php',\n        'noxcontroller'            => 'nox-system/action/noxController.class.php',\n        'noxaction'                => 'nox-system/action/noxAction.class.php',\n        'noxactions'               => 'nox-system/action/noxActions.class.php',\n        'noxjsonaction'            => 'nox-system/action/noxJsonAction.class.php',\n        'noxtemplateaction'        => 'nox-system/action/noxTemplateAction.class.php',\n        'noxthemeactions'          => 'nox-system/action/noxThemeActions.class.php',\n        'noxthemeaction'           => 'nox-system/action/noxThemeAction.class.php',\n        'noxrssaction'             => 'nox-system/action/noxRssAction.class.php',\n        //Вывод\n        'noxtemplate'              => 'nox-system/output/noxTemplate.class.php',\n        'noxform'                  => 'nox-system/output/noxForm.class.php',\n        'noxmail'                  => 'nox-system/mail/noxMail.class.php',\n        'noxmodelform'                => 'nox-system/output/noxModelForm.class.php',\n        'noxjson'                => 'nox-system/output/noxJson.class.php',\n\n        //Пользователи\n        'noxusercontrol'           => 'nox-system/user/noxUserControl.class.php',\n        'noxusermodel'             => 'nox-system/user/noxUser.model.php',\n        'noxgroupmodel'            => 'nox-system/user/noxGroup.model.php',\n        'noxgrouprightsmodel'      => 'nox-system/user/noxGroupRights.model.php',\n        'noxusergroupsmodel'       => 'nox-system/user/noxUserGroups.model.php',\n        'noxsessionmodel'          => 'nox-system/user/noxSession.model.php',\n\n        //Файловая система\n        'noxfilesystem'            => 'nox-system/file/noxFileSystem.class.php',\n\n        //GeoIP\n        'noxgeo'                   => 'nox-system/geo/noxGeo.class.php'\n    );\n}\n\n?>\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/nox-system/autoload/noxAutoLoader.class.php b/nox-system/autoload/noxAutoLoader.class.php
--- a/nox-system/autoload/noxAutoLoader.class.php	
+++ b/nox-system/autoload/noxAutoLoader.class.php	
@@ -41,6 +41,7 @@
         $clazz .= $this->ext;
         $clazz = noxRealPath($clazz);
 
+        var_dump($clazz, file_exists($clazz));
         return file_exists($clazz) && require_once $clazz;
     }
 }
@@ -272,6 +273,8 @@
         'noxusergroupsmodel'       => 'nox-system/user/noxUserGroups.model.php',
         'noxsessionmodel'          => 'nox-system/user/noxSession.model.php',
 
+
+
         //Файловая система
         'noxfilesystem'            => 'nox-system/file/noxFileSystem.class.php',
 
Index: nox-config/config.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php \r\nreturn array (\r\n  'cache' => '0',\r\n  'cookie_domain' => '',\r\n  'dateFormat' => 'd.m.Y',\r\n  'dateTimeFormat' => 'd.m.Y - H:i',\r\n  'debug' => '1',\r\n  'defaultDescription' => '',\r\n  'defaultEmail' => '',\r\n  'defaultKeywords' => '',\r\n  'defaultLocale' => 'en',\r\n  'defaultTheme' => 'default',\r\n  'defaultTitle' => 'Mo3D',\r\n  'is_production' => '0',\r\n  'is_console' => '1',\r\n  'host' => 'test.getoutlines.com',\r\n  'locale' => 'en,fr',\r\n  'mediaSrc' => 'https://getoutlines.com',\r\n  'protocol' => 'https://',\r\n  'searchEngine' => 'sphinx',\r\n  'sendEmailOnException' => '0',\r\n  'smtp_from' => 'Mo3D',\r\n  'smtp_login' => 'support@getoutlines.com',\r\n  'smtp_password' => '12345',\r\n  'smtp_port' => '587',\r\n  'smtp_server' => 'getoutlines.com',\r\n  'timeDateFormat' => 'H:i - d.m.Y',\r\n  'timeFormat' => 'H:i',\r\n  'timezoneSet' => 'UTC',\r\n  'userControl' => '',\r\n  'userDb' => '',\r\n)\r\n?>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/nox-config/config.php b/nox-config/config.php
--- a/nox-config/config.php	
+++ b/nox-config/config.php	
@@ -13,17 +13,17 @@
   'defaultTitle' => 'Mo3D',
   'is_production' => '0',
   'is_console' => '1',
-  'host' => 'test.getoutlines.com',
+  'host' => 'test.mo3d.org',
   'locale' => 'en,fr',
   'mediaSrc' => 'https://getoutlines.com',
   'protocol' => 'https://',
   'searchEngine' => 'sphinx',
   'sendEmailOnException' => '0',
   'smtp_from' => 'Mo3D',
-  'smtp_login' => 'support@getoutlines.com',
+  'smtp_login' => 'support@test.mo3d.org',
   'smtp_password' => '12345',
   'smtp_port' => '587',
-  'smtp_server' => 'getoutlines.com',
+  'smtp_server' => 'test.mo3d.org',
   'timeDateFormat' => 'H:i - d.m.Y',
   'timeFormat' => 'H:i',
   'timezoneSet' => 'UTC',
Index: nox-system/noxSystem.class.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\n\n/**\n * noxSystem\n *\n * Ядро NOX.CMS\n *\n * @author     Сырчиков Виталий Евгеньевич <maddoger@gmail.com>\n * @version    1.2\n * @package    nox-system\n * @subpackage core\n */\nclass noxSystem\n{\n\n    public static $version = '0.8.01.26';\n    public static $prepayMaxDays = 5;\n    /**\n     * Объект управления загрузкой файлов\n     * @var noxAutoLoader\n     */\n    public static $autoLoader = false;\n\n    /**\n     * Объект управления пользователями\n     * @var noxUserControl\n     */\n    public static $userControl = false;\n\n    /**\n     * Объекты работы с корзиной\n     * @var paymentCartModel\n     */\n    public static $cart;\n    public static $cartItems;\n\n    /**\n     * Полный адрес с доменом\n     *\n     * @var string\n     */\n    public static $fullUrl = '/';\n\n    /**\n     * Домен запрашиваемого сайта без www\n     *\n     * @var string\n     */\n    public static $domain = '';\n\n    /**\n     * Весь URL запрос с параметрами\n     *\n     * @var string\n     */\n    public static $requestUrl = '/';\n\n    /**\n     * Путь к файлу/папке из URL без параметров\n     *\n     * @var string\n     */\n    public static $requestPath = '/';\n\n    /**\n     * Адрес, где расположен движок\n     *\n     * @var string\n     */\n    public static $baseUrl = '';\n\n    /**\n     * Адрес модуля из главного маршрутизатора\n     *\n     * @var string\n     */\n    public static $moduleUrl = '/';\n\n    /**\n     * Корневая папка модуля\n     *\n     * @var string\n     */\n    public static $moduleFolder = '/';\n\n    /**\n     * Адрес действия во внутреннем маршрутизаторе\n     *\n     * @var string\n     */\n    public static $actionUrl = '/';\n\n    /**\n     * Массив параметров\n     *\n     * @var array\n     */\n    public static $params = array();\n\n    /**\n     * Массив элементов строки запроса\n     *\n     * @var string\n     */\n    public static $urlArray = array();\n\n    /**\n     * Ajax запрос?\n     *\n     * @var bool\n     */\n    public static $ajax = false;\n\n    /**\n     * Безопасный запрос\n     *\n     * Если пользователь пришел с этого же сайта, то безопасный\n     *\n     * @var bool\n     */\n    public static $safeReferer = false;\n\n    /**\n     * Имя темы для вывода\n     * @var string\n     */\n    public static $theme = '';\n\n    /**\n     * Папка темы для вывода\n     * @var string\n     */\n    public static $themeFolder = '';\n\n    /**\n     * @var noxApplication\n     */\n    public static $application;\n\n    /**\n     * @var kafConsole\n     */\n    public static $console;\n\n    /**\n     * @var kafMedia\n     */\n    public static $media;\n\n    /**\n     * Переводит адрес в массив\n     *\n     * @param string $url адрес\n     * @return array\n     */\n    public static function parseUrl($url)\n    {\n        //Декодируем URL -> раскладываем на массив ->\n        //фильтруем пустые элементы -> преобразуем индексы\n        return array_values(explode('/', trim(urldecode($url), '/')));\n    }\n\n    /**\n     * Преобразовывает массив в URL\n     *\n     * @param array $array массив\n     * @param int $start   номер начального элемента\n     * @param int $count   количество элементов\n     * @return string строка\n     */\n    public static function buildUrl($array = false, $start = null, $count = null)\n    {\n        //Если масссив не задан\n        if ($array === false)\n        {\n            //Берем текущий массив URL\n            $array = self::$urlArray;\n        }\n        //Обрезаем массив\n        $t = array_slice($array, $start, $count);\n        //Преобразуем в строку\n        if (!$t)\n        {\n            return '/';\n        }\n        else\n        {\n            return '/' . implode('/', $t);\n        }\n    }\n\n    /**\n     * Запускает весь процесс работы движка\n     */\n    public static function run()\n    {\n        //Начинаем отчет времени\n        $GLOBALS['statistic']['time'] = microtime(true);\n        $GLOBALS['statistic']['dbQueries'] = 0;\n\n        //Устанавливаем настройки PHP\n        //Отображаем все ошибки\n        error_reporting(E_ALL | E_STRICT);\n        ini_set('display_errors', 0);\n        ini_set('error_log', 'perrorlog');\n        set_error_handler('nox_error_handler');\n        //Сессии\n        ini_set('session.use_cookies', 0);\n        ini_set('session.use_only_cookies', 1);\n        ini_set('session.use_trans_sid', 0);\n        //Настройки\n        ini_set('magic_quotes_runtime', 0);\n        ini_set('magic_quotes_sybase', 0);\n        ini_set('magic_quotes_gpc', 0);\n        ini_set('allow_url_include', 0);\n\n        //Настройка кодировки\n        mb_internal_encoding('UTF-8');\n        mb_http_output('UTF-8');\n\n        //Стандартные заголовки\n        header(\"Content-type: text/html; charset=utf-8\", true);\n\n        try\n        {\n            //Загружаем стандартное исключение\n            require_once(noxRealPath('nox-system/exception/noxException.class.php'));\n            //Загружаем класс кэширования\n            require_once(noxRealPath('nox-system/cache/noxSystemCache.class.php'));\n            //Загружаем автозагрузчик классов\n            require_once(noxRealPath('nox-system/autoload/noxAutoLoader.class.php'));\n            //Загружаем класс работы с датами\n            require_once(noxRealPath('nox-system/date/noxDate.class.php'));\n\n            //Загружаем класс работы с \"консолью\"\n            require_once(noxRealPath('nox-system/console/kafConsole.class.php'));\n            self::$console = new kafConsole();\n\n            //Загружаем класс работы с media\n            require_once(noxRealPath('nox-system/output/kafMedia.class.php'));\n            self::$media = new kafMedia();\n\n            //Автозагрузчик\n            self::$autoLoader = new noxAutoLoader();\n\n            //Загружаем класс отправки шаблонных email\n            require_once(noxRealPath('nox-system/mail/kafMailer.class.php'));\n            require_once(noxRealPath('nox-system/mail/postmarkMailer.class.php'));\n\n            //Загружаем класс работы с постраничной навигацией\n            require_once(noxRealPath('nox-system/output/kafPager.class.php'));\n\n            //Константы\n            include noxRealPath('nox-config/' . (noxConfig::isProduction() ? 'production' : 'dev') . '.env.php');\n\n            //Загружаем настройки дат\n            noxDate::updateConfig();\n\n            //Задаем локаль по-умолчанию\n            $config = noxConfig::getConfig();\n            noxLocale::setLocale(isset($_COOKIE['nox_locale']) ? $_COOKIE['nox_locale'] : $config['defaultLocale']);\n\t\t\t//Если не режим отладки\n\t\t\t\n            //Создаем объект управления пользователями\n            self::$userControl = new noxUserControl();\n\n            self::$cart = new paymentCartModel();\n            self::$cartItems = self::$cart->getCartDetails();\n\n            /****************************\n             * Чтение URL\n             ****************************/\n            //Читаем домен\n            self::$domain = $config['host']; //$_SERVER['SERVER_NAME'];\n\n            //Base URL\n            //TODO: Как определяется baseURL\n            self::$baseUrl = trim(dirname($_SERVER['SCRIPT_NAME']), '\\\\/');\n            if (empty(self::$baseUrl))\n            {\n                self::$baseUrl = '';\n            } else\n            {\n                self::$baseUrl = '/'.self::$baseUrl;\n            }\n\n            //Берем URL с параметрами\n\n            //Если есть параметр url берем с него\n            self::$requestUrl = self::$requestPath = rtrim(urldecode($_SERVER['REQUEST_URI']), '/');\n            self::$requestUrl = self::$requestPath = substr(self::$requestUrl, strlen(self::$baseUrl));\n            if (empty(self::$requestUrl))\n            {\n                self::$requestUrl = self::$requestPath = '/';\n            }\n\n            //Полный адрес\n            self::$fullUrl =\n                ((empty($_SERVER['HTTPS']) || ($_SERVER['HTTPS'] == 'off')) ? 'http://' : 'https://') .\n                    self::$domain .\n                    self::$baseUrl.\n                    self::$requestUrl;\n\n            //Получаем URL без параметров\n            $i = strpos(self::$requestPath, '?');\n            if ($i > 0)\n            {\n                self::$requestPath = '/'.trim(substr(self::$requestPath, 0, $i), '/');\n            }\n            //Массив URL\n            self::$urlArray = self::parseUrl(self::$requestPath);\n\n            function init_get_values($value, $key){\n                $prm = explode(' ',$key);\n                if(isset($prm[1]) && !isset($_GET[$prm[0]][$prm[1]]))\n                    $_GET[$prm[0]][$prm[1]] = $value;\n                else if(!isset($_GET[$prm[0]]))\n                    $_GET[$prm[0]] = $value;\n            }\n            self::$params['get_preset'] = include(noxRealPath('nox-config/get.php'));\n            array_walk_recursive(self::$params['get_preset'], 'init_get_values');\n\n            //Защита от magic quotes\n            if (@get_magic_quotes_gpc()) {\n                function stripslashes_gpc(&$value)\n                {\n                    $value = stripslashes($value);\n                }\n                array_walk_recursive($_GET, 'stripslashes_gpc');\n                array_walk_recursive($_POST, 'stripslashes_gpc');\n                array_walk_recursive($_COOKIE, 'stripslashes_gpc');\n                array_walk_recursive($_REQUEST, 'stripslashes_gpc');\n            }\n\n            //Сохраняем GET и POST массивы в параметры\n            self::$params['get'] = $_GET;\n            self::$params['post'] = $_POST;\n            self::$params['requestMethod'] = $_SERVER['REQUEST_METHOD'];\n\n            //Ajax запрос?\n            self::$ajax = (isset($_SERVER['HTTP_X_REQUESTED_WITH']) &&\n                !empty($_SERVER['HTTP_X_REQUESTED_WITH']) &&\n                (strtolower($_SERVER['HTTP_X_REQUESTED_WITH']) == 'xmlhttprequest'))\n                || isset($_REQUEST['ajax']);\n\n            self::$params['ajax'] = self::$ajax;\n\n            //Проверяем откуда пришел пользователь\n            if (isset($_SERVER['HTTP_REFERER']) && !empty($_SERVER['HTTP_REFERER']))\n            {\n                $ref = $_SERVER['HTTP_REFERER'];\n                $server_add =\n                    ((empty($_SERVER['HTTPS']) || ($_SERVER['HTTPS'] == 'off')) ? 'http://' : 'https://').self::$domain;\n                self::$safeReferer = !(bool)(substr_compare($ref, $server_add, 0, strlen($server_add)));\n                self::$params['safeReferer'] = self::$safeReferer;\n            }\n\n            //Создаем приложение\n\n            $userApplicationPath = noxRealPath('nox-config/application.class.php');\n            if (file_exists($userApplicationPath))\n            {\n                include(noxRealPath('nox-config/application.class.php'));\n                if (class_exists('application', false))\n                {\n                    $application = new application();\n                } else\n                {\n                    $application = new noxApplication();\n                }\n            } else\n            {\n                $application = new noxApplication();\n            }\n            //Запускаем\n            noxSystem::$application = $application;\n            $application->run();\n\n            //self::$route['statusCode'] = $statusCode;\n            //_d(self:: getUser());\n\n            //_d(self::dump());\n\n            //Закрываем все открытые соединения с БД\n            noxDbConnector::closeAll();\n\n        } catch (Exception $e)\n        {\n            header(\"Content-type: text/html; charset=utf-8\", true);\n            print $e;\n        }\n        //_d(noxSystem::dump());\n        //_d($_SERVER);\n        $GLOBALS['statistic']['time'] = microtime(true)-$GLOBALS['statistic']['time'];\n        //_d($GLOBALS['statistic']);\n    }\n\n    /**\n     * Выполняет немедленный переход по адресу и прекращает выполнение скриптов\n     *\n     * @param string $url адрес для перехода\n     * @param string $str сообщение о перенаправлении\n     */\n    public static function location($url = '', $str = \"Перенаправление...\")\n    {\n        if ($url == '')\n        {\n            $url = self::$fullUrl;\n        } elseif (is_array($url))\n        {\n            $url = self::$baseUrl . '/' . implode('/', $url);\n        } else\n        {\n            if ($url[0] == '/')\n            {\n                $url = self::$baseUrl . $url;\n            }\n        }\n        header(\"Location: \" . $url);\n        exit($str);\n    }\n\n    /**\n     * Выполняет немедленный переход  на предыдущую страницу и прекращает выполнение скриптов\n     *\n     * @param string $str сообщение о перенаправлении\n     */\n    public static function locationBack($str = \"Перенаправление...\")\n    {\n        $url = self::$fullUrl;\n        if (empty($_SERVER['HTTP_REFERER']) or ($_SERVER['HTTP_REFERER'] == ($url)))\n        {\n            self::location('/', $str);\n        } else\n        {\n            self::location($_SERVER['HTTP_REFERER'], $str);\n        }\n    }\n\n    /**\n     * Переход по адресу через указанное кол-во времени\n     *\n     * @param string $url адрес для перехода\n     * @param int $time   время в секундах, спустя которое произойдет перенаправление\n     * @param string $str сообщение о перенаправлении\n     */\n    public static function locationAfterTime($url = '', $time = 5, $str = '')\n    {\n        if ($url == '')\n        {\n            $url = self::$fullUrl;\n        } elseif (is_array($url))\n        {\n            $url = self::$baseUrl . '/' . implode('/', $url);\n        } else\n        {\n            if ($url[0] == '/')\n            {\n                $url = self::$baseUrl . $url;\n            }\n        }\n        header(\"Refresh:{$time}; url=\" . $url);\n        if ($str)\n        {\n            exit($str);\n        }\n    }\n\n    /**\n     * Авторизует пользователя\n     * @static\n     * @return bool Результат авторизации\n     */\n    public static function authorization()\n    {\n        return self::$userControl->authorization();\n    }\n\n    /**\n     * Возвращает модель пользователя\n     * @static\n     * @return noxUserModel\n     */\n    public static function getUserModel()\n    {\n        return self::$userControl->getUserModel();\n    }\n\n    /**\n     * Возвращает ID темущего пользователя\n     *\n     * @static\n     * @return int\n     */\n    public static function getUserId()\n    {\n        return self::$userControl->getUserId();\n    }\n\n    /**\n     * Возвращает массив с данными текущего пользователя\n     * @static\n     * @return array\n     */\n    public static function getUser()\n    {\n        return self::$userControl->getUser();\n    }\n\n    /**\n     * Проверяет, является ли пользователь членом группы\n     *\n     * @param $group_id\n     * @param int $user_id 0 для текущего пользователя\n     * @return bool\n     */\n    public static function userInGroup($group_id, $user_id=0)\n    {\n        return self::$userControl->userInGroup($group_id, $user_id);\n    }\n\n    /**\n     * Проверяет, имеет ли пользователь право\n     *\n     * @param string $module модуль, которому необходимо право\n     * @param string $right  идентификатор права\n     * @return bool\n     */\n    public static function haveRight($module, $right)\n    {\n        return self::$userControl->haveRight($module, $right);\n    }\n\n    /**\n     * Возвращает дамп переменных системы (в основном маршрутизация)\n     *\n     * @static\n     * @return string\n     */\n    public static function dump()\n    {\n        return\n            'Full URL: ' . htmlspecialchars(self::$fullUrl) . \"\\n\"\n            . 'Base URL: ' . htmlspecialchars(self::$baseUrl) . \"\\n\"\n            . 'Request URL: ' . htmlspecialchars(self::$requestUrl) . \"\\n\"\n            . 'Request Path: ' . htmlspecialchars(self::$requestPath) . \"\\n\"\n            . 'Module URL: ' . htmlspecialchars(self::$moduleUrl) . \"\\n\"\n            . 'Action URL: ' . htmlspecialchars(self::$actionUrl) . \"\\n\"\n            . 'Params: ' . _d(self::$params, true) . \"\\n\"\n            . 'Module Folder: ' . htmlspecialchars(self::$moduleFolder) . \"\\n\";\n    }\n\n    /**\n     * Возвращает массив со статистикой движка\n     *\n     * @static\n     * @return mixed\n     */\n    public static function getStatistic()\n    {\n        //Заканчиваем отчет времени\n        $GLOBALS['statistic']['time'] = microtime(true) - @$GLOBALS['statistic']['time'];\n        //Вывод статистики\n        //_d($GLOBALS['statistic']);\n        return $GLOBALS['statistic'];\n    }\n\n}\n\n/*\nДополнительные функции\n*/\n\n/**\n * Выводит или возвращает значение переменной в теге <pre>\n *\n * @param mixed $var   переменная\n * @param bool $return возвращать или выводить результат\n * @return string\n */\nfunction _d($var, $return = false)\n{\n    $text = print_r($var, true);\n    if (!$return)\n    {\n        $text = htmlspecialchars($text);\n    }\n    if (!$return)\n    {\n        echo '<pre class=\"debug\">' . $text . '</pre>';\n    }\n    return $text;\n}\n\n/**\n * Форматирует размер файла\n *\n * @param int $bytes размер в байтах\n * @return string\n */\nfunction noxFormatBytes($bytes)\n{\n    if ($bytes < 1024)\n    {\n        return $bytes . ' B';\n    }\n    elseif ($bytes < 1048576)\n    {\n        return round($bytes / 1024, 2) . ' KB';\n    }\n    elseif ($bytes < 1073741824)\n    {\n        return round($bytes / 1048576, 2) . ' MB';\n    }\n    elseif ($bytes < 1099511627776)\n    {\n        return round($bytes / 1073741824, 2) . ' GB';\n    }\n    else\n    {\n        return round($bytes / 1099511627776, 2) . ' TB';\n    }\n}\n\n/**\n * Возвращает параметр $var с приведением к типу $default и его значением\n * @param mixed $var     Параметр\n * @param mixed $default Значение по-умолчанию\n * @return mixed\n */\nfunction getParam($var, $default = 0)\n{\n    settype($var, gettype($default));\n    if (!$var)\n    {\n        return $default;\n    } else\n    {\n        return $var;\n    }\n}\n\n/**\n * Преобразует относительный путь от корня сайта в абсолютный\n * @param $path\n * @return string\n */\nfunction noxRealPath($path)\n{\n    static $realpath = '';\n    if (!$realpath)\n    {\n        $realpath = str_replace('\\\\', '/', realpath(dirname(__FILE__) . '/..')) . '/';\n    }\n\n    $path = str_replace('\\\\', '/', trim($path, '\\//'));\n    return $realpath . $path;\n}\n\nfunction nox_error_handler($errno, $errstr, $file, $line) {\n    $trace = debug_backtrace();\n    $report = ['=== START ==='];\n    $report[] = \"Url: {$_SERVER['REQUEST_URI']};\";\n    $report[] = \"Method: {$_SERVER['REQUEST_METHOD']};\";\n    $report[] = \"Referer: {$_SERVER['HTTP_REFERER']};\";\n    $report[] = \"-----------------------------------\";\n    $report[] = \"ERRNO: $errno;\";\n    $report[] = \"ERRSTR: $errstr;\";\n    $report[] = \"FILE: {$file}:{$line}\";\n\n    for($i = 1 , $l = count($trace); $i < $l; $i++)\n    {\n        if(!noxConfig::isProduction())\n            echo \"FILE: {$file}:{$line} </br>\";\n        $item = $trace[$i];\n        $log = $l - $i . ': ';\n        if(isset($item['file'])) {\n            $log .= $item['file'] . ':' . $item['line'];\n        }\n        if(isset($item['function'])) {\n            $fn = $item['function'] . '(' . implode(', ', array_map('nox_error_handler_args_maker', $item['args'])) . ')';\n            if(isset($item['type']) && isset($item['object'])) {\n                $fn = get_class($item['object']) . $item['type'] . $fn;\n            }\n            $log .= ' ' . $fn;\n        }\n        $report[] = $log;\n    }\n    $report[] = '';\n\n    $report[] = print_r(getallheaders(), true);\n    $report[] = '=== END ===';\n\n    error_log(implode(\"\\n\", $report));\n}\n\nfunction nox_error_handler_args_maker($x) {\n    $type = gettype($x);\n    switch($type) {\n        case 'string':\n            return \"'{$x}'\";\n        case 'boolean':\n        case 'integer':\n        case 'double':\n        case '':\n            return $x;\n        default:\n            return \"'[{$type}]'\";\n    }\n}\n\nfunction gen($n){\n    $base = []; $cont = []; $out = '';\n    $n = $n - strlen($out);\n    for($i = 48; $i <= 57; $i++) $base[] = $i;\n    for($i = 65; $i <= 90; $i++) $base[] = $i;\n    for($i = 97; $i <= 122; $i++) $base[] = $i;\n    for($i = 0; $i < rand(50, 100); $i++) $cont[] = $base[array_rand($base)];\n    for($i = 0; $i < $n; $i++) $out .= chr($cont[array_rand($cont)]);\n    return $out;\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/nox-system/noxSystem.class.php b/nox-system/noxSystem.class.php
--- a/nox-system/noxSystem.class.php	
+++ b/nox-system/noxSystem.class.php	
@@ -201,7 +201,7 @@
         //Устанавливаем настройки PHP
         //Отображаем все ошибки
         error_reporting(E_ALL | E_STRICT);
-        ini_set('display_errors', 0);
+        ini_set('display_errors', 1);
         ini_set('error_log', 'perrorlog');
         set_error_handler('nox_error_handler');
         //Сессии
@@ -264,6 +264,9 @@
             //Создаем объект управления пользователями
             self::$userControl = new noxUserControl();
 
+            //Пеймент
+
+            require_once(noxRealPath('nox-modules/payment/lib/models/paymentCart.model.php'));
             self::$cart = new paymentCartModel();
             self::$cartItems = self::$cart->getCartDetails();
 
@@ -662,7 +665,7 @@
     $report = ['=== START ==='];
     $report[] = "Url: {$_SERVER['REQUEST_URI']};";
     $report[] = "Method: {$_SERVER['REQUEST_METHOD']};";
-    $report[] = "Referer: {$_SERVER['HTTP_REFERER']};";
+    //$report[] = "Referer: {$_SERVER['HTTP_REFERER']};";
     $report[] = "-----------------------------------";
     $report[] = "ERRNO: $errno;";
     $report[] = "ERRSTR: $errstr;";
Index: nox-system/application/noxApplication.class.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\n\n/**\n * Приложение\n *\n * Выполняет всю работу по маршрутизации и запуску действий\n *\n * @version    1.2\n * @author Сырчиков Виталий Евгеньевич <maddoger@gmail.com>\n */\n\nclass noxApplication\n{\n    /**\n     * Главный маршрут\n     *\n     * @var array\n     */\n    public $routes;\n\n    /**\n     * Имя модуля\n     * @var string\n     */\n    public $moduleName;\n\n    /**\n     * Раздел модуля\n     * @var string\n     */\n    public $sectionName;\n\n    /**\n     * Имя действия\n     * @var string\n     */\n    public $actionName;\n\n\n    /**\n     * Определяет главный маршрут\n     */\n    public function runDomainRouting()\n    {\n        $this->routes = noxConfig::getDomainRoutes(noxSystem::$domain);\n    }\n\n    /**\n     * Маршутизация до действия\n     * @return int код\n     */\n    public function runRouting()\n    {\n        /****************************\n         * Маршрутизатор\n         ****************************/\n\n        //Флаг найденного модуля\n        $routeFound = false;\n\n        //Имя модуля\n        $moduleName = '';\n        //Имя дейсвия\n        $action = '';\n        $section = '';\n\n        //Загружаем информацию об установленных модулях\n        $modules = noxConfig::getModules();\n\n        //Выбираем маршрутизатор\n        if (noxSystem::$urlArray[0] == 'administrator')\n        {\n            if (noxSystem::authorization())\n            {\n                //Срабатывает только с url и только с авторизацией\n\n                /****************************\n                 * Маршрутизатор для бекэнда\n                 ****************************/\n\n                noxSystem::$params['backend'] = true;\n                noxSystem::$params['frontend'] = false;\n\n                if (isset(noxSystem::$urlArray[1]))\n                {\n                    if(!isset(noxSystem::$params['get']['action'])) noxSystem::$params['get']['action'] = '';\n                    $moduleName = getParam(@noxSystem::$urlArray[1], 'system');\n                    $section = getParam(@noxSystem::$params['get']['section'], 'administrator');\n                    $action = getParam(@noxSystem::$params['get']['action'], '');\n                } else\n                {\n                    $moduleName = 'system';\n                    $section = 'administrator';\n                    $action = '';\n                }\n\n                //URL\n                noxSystem::$actionUrl = '/';\n                noxSystem::$moduleUrl = noxSystem::$requestPath;\n                noxSystem::$moduleFolder = noxRealPath('nox-modules/' . $moduleName);\n\n                $this->moduleName = $moduleName;\n                $this->sectionName = ucfirst($section);\n                $this->actionName = ucfirst($action);\n\n                return 200;\n            }\n            else\n            {\n                //Нет прав\n                return 401;\n            }\n        }\n        else\n        {\n            /****************************\n             * Маршрутизатор для фронтенда\n             ****************************/\n\n            noxSystem::$params['backend'] = false;\n            noxSystem::$params['frontend'] = true;\n\n            //Обрабатываем маршруты, чтобы определить модуль\n            foreach ($this->routes as $route)\n            {\n                if (!$route['enabled'])\n                {\n                    continue;\n                }\n\n                $preg = $route['url'];\n\n                if ($preg == '*')\n                {\n                    $preg = '/^(\\/|(.*?))$/si';\n                } else\n                {\n                    //1) Экранируем слеши и ост. символы\n                    $preg = str_replace(array('*', '/'), array('(.*?)', '\\/'), $preg);\n                    //2) Заменяем последний параметр для возможных пустых значений\n                    if (substr($preg, -7, 7) == '\\/(.*?)')\n                    {\n                        $preg = substr($preg, 0, -7) . '(\\/|(.*?))';\n                    }\n                    //3) Дополняем\n                    $preg = '/^\\/' . $preg . '$/si';\n                }\n\n                //Записываем все совпадения\n                if (preg_match($preg, noxSystem::$requestPath, $matches))\n                {\n                    //URL действия\n\n                    if (count($matches)==1)\n                    {\n                        noxSystem::$actionUrl = '/';\n                        noxSystem::$moduleUrl = noxSystem::$requestPath;\n                    } else\n                    {\n                        $lastElement = @$matches[count($matches)-1];\n\n                        if (empty($lastElement))\n                        {\n                            noxSystem::$actionUrl = '/';\n                            noxSystem::$moduleUrl = noxSystem::$requestPath;\n                        } else\n                        {\n                            noxSystem::$actionUrl = $lastElement;\n                            noxSystem::$moduleUrl = substr(noxSystem::$requestPath, 0, -strlen(noxSystem::$actionUrl));\n                        }\n                    }\n                    //Ищем маршрут внутри модуля\n\n                    //Имя модуля\n                    $moduleName = $route['module'];\n\n                    //Если модуль не установлен, то выходим\n                    if (!isset($modules[$moduleName]))\n                    {\n                        continue;\n                    }\n\n                    noxSystem::$moduleFolder = noxRealPath('nox-modules/' . $route['module']);\n\n                    //Файл внутреннего маршрутизатора\n                    $routerPath = noxSystem::$moduleFolder . '/lib/config/routes.php';\n\n                    //Проверяем, существует ли файл маршрутизации\n                    if (!file_exists($routerPath))\n                    {\n                        //Если нет, то переходим к следующему маршруту\n                        continue;\n                    }\n\n                    //Внутренняя маршрутизаци\n                    $moduleRoutes = include($routerPath);\n                    foreach ($moduleRoutes as $mRoute)\n                    {\n                        if (!@$mRoute['enabled'])\n                        {\n                            continue;\n                        }\n\n                        $preg = $mRoute['url'];\n\n                        if (empty($preg))\n                        {\n                            $preg = '/^\\/$/si';\n                        } else\n                        {\n                            //1) Экранируем слеши и ост. символы\n                            $preg = str_replace(array('*', '/'), array('(.*?)', '\\/'), $preg);\n                            //2) Создаем шаблоны для параметров\n                            $preg = preg_replace('/\\<([A-Za-z0-9_-]*?)\\>/si', '(?P<$1>[^\\/]+)', $preg);\n                            $preg = preg_replace('/\\<([A-Za-z0-9_-]*?)\\:(.*?)\\>/si', '(?P<$1>$2)', $preg);\n                            //3) Дополняем\n                            $preg = '/^\\/' . $preg . '$/si';\n                        }\n\n\n\n                        //Записываем все совпадения\n                        if (preg_match($preg, noxSystem::$actionUrl, $matches))\n                        {\n                            //Маршрут найден\n                            $routeFound = $route['routeFound'] = true;\n\n                            //Обрабатываем параметры\n                            foreach ($matches as $k=> $v)\n                            {\n                                if (is_string($k))\n                                {\n                                    noxSystem::$params[$k] = $v;\n                                }\n                            }\n                            //Действие модуля\n                            $action = (isset($mRoute['action'])) ? $mRoute['action'] : '';\n                            $section = (isset($mRoute['section'])) ? $mRoute['section'] : 'default';\n\n                            break;\n                        }\n                    }\n                    //Если маршут найден\n                    if ($routeFound)\n                    {\n                        //Выходим из маршрутизатора\n                        $this->moduleName = $moduleName;\n                        $this->sectionName = ucfirst($section);\n                        $this->actionName = ucfirst($action);\n                        return 200;\n                    }\n                }\n            }\n        }\n        return 404;\n    }\n\n\n    /**\n     * Выполняет действие\n     *\n     * @return int код\n     */\n    public function runAction()\n    {\n        $initPath = noxRealPath('nox-modules/' . $this->moduleName . '/lib/config/init.php');\n        //Проверяем, существует ли файл инициализации\n        if (file_exists($initPath))\n        {\n                include_once($initPath);\n        }\n\n        //Проверям раздел и действие\n\n        //Создаем класс контроллера вида administratorConfigController\n        $className = $this->moduleName . $this->sectionName . $this->actionName . 'Controller';\n        //Пробуем загрузить класс\n        if (class_exists($className, true))\n        {\n            noxSystem::$console->log('/' . $className . '.action.php');\n            //Работаем с контроллером\n\n            //Создаем объект контроллера\n            $class = new $className();\n            //Выполняем дейсвтие\n            $statusCode = $class->run();\n            unset($class);\n            return $statusCode;\n        } else\n        {\n            //Создаем класс отдельного действия administratorConfigEditAction\n            $className = $this->moduleName . $this->sectionName . $this->actionName . 'Action';\n\n            //Пробуем загрузить класс\n            if (class_exists($className, true))\n            {\n                noxSystem::$console->log('/' . $className . '.action.php');\n                //Работаем с действием\n\n                //Создаем объект действия\n                $class = new $className();\n                //Выполняем дейсвтие\n                $statusCode = $class->run();\n                unset($class);\n                return $statusCode;\n            } else\n            {\n                //Создаем класс множественного действия administratorConfigActions\n                $className = $this->moduleName . $this->sectionName . 'Actions';\n                if (empty($this->actionName)) $this->actionName = 'Default';\n\n                //Пробуем загрузить класс и проверяем, есть ли в нем нужный метод\n                if (class_exists($className, true) && method_exists($className, 'action' . $this->actionName))\n                {\n                    noxSystem::$console->log('/' . $className . '.action.php');\n                    noxSystem::$console->log('action' . $this->actionName);\n                    //Работаем со множественным действием\n\n                    //Создаем объект действия\n                    $class = new $className();\n                    //Выполняем дейсвтие\n                    $statusCode = $class->run($this->actionName);\n                    unset($class);\n                    return $statusCode;\n                }\n            }\n        }\n        return 404;\n    }\n\n    /**\n     * Выполняет все действия по приложению\n     */\n    public function run()\n    {\n        noxSystem::$params['backend'] = false;\n        noxSystem::$params['frontend'] = true;\n\n        //Запускаем главный маршрутизатор\n        $this->runDomainRouting();\n        $statusCode = $this->runRouting();\n\n        noxSystem::$console->log(noxSystem::$moduleFolder);\n        noxSystem::$console->log('/lib/action/' . (noxSystem::$params['backend'] ? 'back' : 'front') . 'end');\n\n        if ($statusCode == 200)\n        {\n            $statusCode = $this->runAction();\n        }\n\n        //Если ошибка или класс не найден\n        if ($statusCode && ($statusCode != 200))\n        {\n            //Если ошибка числовая, вызываем дейсвие ошибки\n            if (is_numeric($statusCode))\n            {\n                $class = new errorActions();\n                $class->run($statusCode);\n            } elseif (is_string($statusCode))\n            {\n                //Иначе, выводим строку исключением\n                throw new noxException($statusCode);\n            }\n        }\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/nox-system/application/noxApplication.class.php b/nox-system/application/noxApplication.class.php
--- a/nox-system/application/noxApplication.class.php	
+++ b/nox-system/application/noxApplication.class.php	
@@ -240,6 +240,7 @@
                             break;
                         }
                     }
+
                     //Если маршут найден
                     if ($routeFound)
                     {
@@ -300,6 +301,7 @@
                 //Создаем объект действия
                 $class = new $className();
                 //Выполняем дейсвтие
+
                 $statusCode = $class->run();
                 unset($class);
                 return $statusCode;
